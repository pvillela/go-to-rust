package main

import (
	"fmt"
	"go/ast"

	// "go/format"
	"go/parser"
	"go/printer"
	"go/token"
	"regexp"
	"strings"
)

// parseToRust parses a string containing Go source code and returns a string containing
// a rough equivalent Rust code.
func parseToRust(src string) string {
	var sb strings.Builder

	// Create the AST by parsing src.
	fset := token.NewFileSet() // positions are relative to fset
	astFile, err := parser.ParseFile(fset, "src.go", src, 0)
	if err != nil {
		panic(err)
	}

	// Rewrite all non-type identifiers in snake_case, prepending "z__" to all non-type
	// identifiers that start with a capital letter.
	ast.Inspect(astFile, func(n ast.Node) bool {
		var s string
		ret := true
		switch x := n.(type) {
		case *ast.TypeSpec:
			// s = fmt.Sprintf("*** struct %v", x.Name.Name)
			// ret = false
			var sb strings.Builder
			ret = type_spec(&sb, x)
			s += sb.String()
		case *ast.FuncDecl:
			var sb strings.Builder
			ret = func_decl(fset, &sb, x)
			s += sb.String()
		case *ast.DeclStmt:
			var sb strings.Builder
			printer.Fprint(&sb, fset, x)
			s += sb.String()
			// case *ast.Ident:
			// 	s = "Ident -->" + x.Name
		}
		if s != "" {
			// sb.WriteString(fmt.Sprintf("%s:\t%s\n", fset.Position(n.Pos()), s))
			sb.WriteString(fmt.Sprintf("%s\n\n", s))
		}
		return ret
	})

	// Inspect the AST and print all identifiers and literals.
	ast.Inspect(astFile, func(n ast.Node) bool {
		var s string
		ret := true
		switch x := n.(type) {
		case *ast.TypeSpec:
			// s = fmt.Sprintf("*** struct %v", x.Name.Name)
			// ret = false
			var sb strings.Builder
			ret = type_spec(&sb, x)
			s += sb.String()
		case *ast.FuncDecl:
			var sb strings.Builder
			ret = func_decl(fset, &sb, x)
			s += sb.String()
		case *ast.DeclStmt:
			var sb strings.Builder
			printer.Fprint(&sb, fset, x)
			s += sb.String()
			// case *ast.Ident:
			// 	s = "Ident -->" + x.Name
		}
		if s != "" {
			// sb.WriteString(fmt.Sprintf("%s:\t%s\n", fset.Position(n.Pos()), s))
			sb.WriteString(fmt.Sprintf("%s\n\n", s))
		}
		return ret
	})

	return sb.String()
}

// mapType maps Go types to Rust types
func mapType(typ string) string {
	switch typ {
	case "int":
		return "i64"
	case "uint":
		return "u64"
	case "string":
		return "String"
	case "&{time Time}":
		return "DateTime"
	}
	return typ
}

// pubifyName transforms Go names to Rust names, indicating when they are public
func pubifyName(name string) (pub, newName string) {
	name1 := name[0:1]
	if strings.ToUpper(name1) == name1 {
		pub = "pub "
		name1 = strings.ToLower(name1)
		newName = name1 + name[1:]
	}
	return
}

// type_spec transforms an *ast.TypeSpec node
func type_spec(fset *token.FileSet, sb *strings.Builder, node *ast.TypeSpec) bool {
	switch node.Type.(type) {
	case *ast.StructType:
		// do nothing
		break
	default:
		printer.Fprint(sb, fset, node)
		return false
	}
	sb.WriteString(fmt.Sprintf("pub struct %v", node.Name.Name))
	return struct_type(sb, node.Type.(*ast.StructType))
}

// struct_type transforms an *ast.StructType node
func struct_type(sb *strings.Builder, node *ast.StructType) bool {
	sb.WriteString(" {\n")
	for _, field := range node.Fields.List {
		pub, name := pubifyName(field.Names[0].Name)
		typ := mapType(fmt.Sprint(field.Type))
		sb.WriteString(fmt.Sprintf("%v %v: %v,\n", pub, name, typ))
	}
	sb.WriteString("}\n")
	return false
}

// func_decl transforms an *ast.FuncDecl node
func func_decl(fset *token.FileSet, sb *strings.Builder, node *ast.FuncDecl) bool {
	// fn name
	{
		pub, name := pubifyName(node.Name.Name)
		sb.WriteString(fmt.Sprintf("%vfn %v", pub, name))
	}

	// Parameters
	{
		sb.WriteString("(\n")
		for _, field := range node.Type.Params.List {
			name := field.Names[0].Name
			typ := mapType(fmt.Sprint(field.Type))
			sb.WriteString(fmt.Sprintf("%v: %v,\n", name, typ))
		}
		sb.WriteString(") ")
	}

	// Return type
	{
		sb.WriteString("-> ")
		first := true
		for _, field := range node.Type.Results.List {
			typ := mapType(fmt.Sprint(field.Type))
			if first {
				first = false
			} else {
				sb.WriteString(", ")
			}
			sb.WriteString(fmt.Sprintf("%v", typ))
		}
		sb.WriteString(" ")
	}

	// Body
	{
		var bodySb strings.Builder
		printer.Fprint(&bodySb, fset, node.Body)
		bodyBytes := fieldsToSnakeCase(&bodySb)
		sb.Write(bodyBytes)
	}

	return false
}

// fieldsToSnakeCase transforms all instances of struct fields to snake case.
func fieldsToSnakeCase(sb *strings.Builder) []byte {
	bytes := []byte(sb.String())

	replace := func(re *regexp.Regexp) {
		lcs := re.FindAllSubmatchIndex(bytes, -1)
		for _, indices := range lcs {
			idx := indices[2]
			bytes[idx] = bytes[idx] + 32 // transforms from upper case to lower case
		}
	}

	// Field access
	{
		re := regexp.MustCompile(`\.([A-Z])`)
		replace(re)
	}

	// Struct instantiation
	{
		re := regexp.MustCompile(`([A-Z])[0-9A-Za-z_]*:`)
		replace(re)
	}

	return bytes
}

// Provide by ChatGPT
func camelToSnake(s string) string {
	// Use a regular expression to find all upper case characters in the string
	rx := regexp.MustCompile("[A-Z]")
	positions := rx.FindAllStringIndex(s, -1)

	// Iterate through the positions and add an underscore before each upper case character
	result := ""
	lastIndex := 0
	for _, pos := range positions {
		result += s[lastIndex:pos[0]] + "_" + strings.ToLower(s[pos[0]:pos[1]])
		lastIndex = pos[1]
	}
	result += s[lastIndex:]

	return strings.ToLower(result)
}
